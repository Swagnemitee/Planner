{"version":3,"sources":["types/enums.ts","components/AddGroup.tsx","components/Header.tsx","components/Task.tsx","components/TaskList.tsx","components/TaskGroup.tsx","components/AddList.tsx","components/AddTask.tsx","components/EditTask.tsx","components/EditGroup.tsx","components/EditList.tsx","components/TaskField.tsx","components/App.tsx","index.tsx"],"names":["Reset","defaultInputs","name","AddGroup","userState","setUserState","saveData","setAddGroup","saveMemento","closeWindow","useState","inputState","setInputState","className","onClick","type","value","onChange","e","property","target","newUserState","newID","nextID","toString","newData","id","listIDs","groups","groupIDs","push","Header","mementos","setMementos","mementoIndex","setMementoIndex","undoDisabled","redoDisabled","length","addGroup","src","alt","newMementos","undefined","JSON","stringify","newMementoIndex","parse","Task","task","index","setEditTask","setSelectedID","parentID","setSelectedParentID","draggableId","provided","count","done","ref","innerRef","draggableProps","dragHandleProps","tasks","doTask","TaskList","list","listIndex","setAddTask","setEditList","droppableId","droppableProps","taskIDs","map","taskIndex","placeholder","TaskGroup","group","groupIndex","setAddList","setEditGroup","lists","reset","NEVER","AddList","groupID","handleChange","listID","replace","taskID","parseInt","newList","splice","indexOf","oldData","_","isEqual","EditGroup","flatMap","l","forEach","EditList","newGroup","TaskField","editGroup","addList","editList","addTask","editTask","selectedID","selectedParentID","onDragEnd","result","destination","source","direction","App","userData","localStorage","setItem","resetTasks","user","localUser","getItem","lastLogin","Date","now","DAY","WEEK","d1","dayjs","d2","sameMonth","isSame","sameWeek","sameDay","console","log","locale","loadData","extend","updateLocale","weekStart","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ca9a84e.chunk.js","sourcesContent":["export enum Reset {\r\n  NEVER = \"never\",\r\n  DAY = \"day\",\r\n  WEEK = \"week\",\r\n  MONTH = \"month\",\r\n}","import { useState } from 'react';\r\nimport { UserType } from '../types/types';\r\n\r\nimport '../styles/Add&Edit.scss';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  setAddGroup: React.Dispatch<React.SetStateAction<boolean>>;\r\n  saveMemento: () => void;\r\n}\r\n\r\nconst defaultInputs = {\r\n  name: \"\",\r\n}\r\n\r\nexport default function AddGroup({\r\n  userState, setUserState, saveData, setAddGroup, saveMemento\r\n}: props) {\r\n  const closeWindow = (): void => {\r\n    setAddGroup(false);\r\n  }\r\n\r\n  const handleChange = (property: string, value: any): void => {\r\n    setInputState({...inputState, [property]: value});\r\n  }\r\n\r\n  const handleCreate = (): void => {\r\n    saveMemento();\r\n    \r\n    let newUserState = {...userState};\r\n\r\n    let newID = (newUserState.nextID++).toString();\r\n    let newData = {...inputState, id: newID, listIDs: []};\r\n\r\n    newUserState.groups[newID] = newData;\r\n    newUserState.groupIDs.push(newID);\r\n\r\n    setUserState({...newUserState});\r\n    setInputState(defaultInputs);\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const [inputState, setInputState] = useState(defaultInputs);\r\n\r\n  return (\r\n    <div className=\"Add\">\r\n      <div className=\"Add-bg\"\r\n        onClick={closeWindow}\r\n      ></div>\r\n      <div className=\"Add-main\">\r\n        <div className=\"Add-main-inputs\">\r\n          <div className=\"Add-main-inputs-name\">\r\n            <label>Group Name</label>\r\n            <input \r\n              type=\"text\" \r\n              value={inputState.name} \r\n              onChange={(e) => handleChange(\"name\", e.target.value)} \r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"Add-main-buttons\">\r\n          <h3\r\n            onClick={closeWindow}\r\n          >Cancel</h3>\r\n          <h3\r\n            onClick={handleCreate}\r\n          >Create</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { useState } from 'react';\r\nimport '../styles/Header.scss';\r\nimport { UserType } from '../types/types';\r\nimport AddGroup from './AddGroup';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  mementos: string[];\r\n  setMementos: React.Dispatch<React.SetStateAction<string[]>>;\r\n  mementoIndex: number;\r\n  setMementoIndex: React.Dispatch<React.SetStateAction<number>>;\r\n  saveMemento: () => void;\r\n}\r\n\r\nexport default function Header({\r\n  userState, setUserState, saveData, mementos, setMementos, mementoIndex, setMementoIndex, saveMemento\r\n}: props) {\r\n  const undo = (): void => {\r\n    if (undoDisabled()) return;\r\n    const newMementos = [...mementos];\r\n    if (newMementos[mementoIndex] === undefined) {\r\n      newMementos[mementoIndex] = JSON.stringify(userState);\r\n      setMementos(newMementos);\r\n    }\r\n\r\n    const newMementoIndex = mementoIndex - 1; \r\n    const newUserState = JSON.parse(mementos[newMementoIndex]);\r\n\r\n    setUserState({...newUserState});\r\n    setMementoIndex(newMementoIndex);\r\n    saveData();\r\n  }\r\n\r\n  const redo = (): void => {\r\n    if (redoDisabled()) return;\r\n    const newMementoIndex = mementoIndex + 1; \r\n    const newUserState = JSON.parse(mementos[newMementoIndex]);\r\n\r\n    setUserState({...newUserState});\r\n    setMementoIndex(newMementoIndex);\r\n    saveData();\r\n  }\r\n\r\n  const undoDisabled = (): boolean => {\r\n    return mementoIndex === 0;\r\n  }\r\n\r\n  const redoDisabled = (): boolean => {\r\n    return mementoIndex >= mementos.length-1;\r\n  }\r\n\r\n  const [addGroup, setAddGroup] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n      <img src=\"icons/undo.png\" alt=\"Undo\" className={undoDisabled() ? \"disabled\" : \"\"}\r\n          onClick={undo}\r\n        />\r\n        <img src=\"icons/redo.png\" alt=\"Redo\" className={redoDisabled() ? \"disabled\" : \"\"}\r\n          onClick={redo}\r\n        />\r\n        <img src=\"icons/add.png\" alt=\"Add\"\r\n          onClick={() => setAddGroup(true)}\r\n        />\r\n      </header>\r\n      {\r\n        addGroup &&\r\n        <AddGroup\r\n          userState = {userState}\r\n          setUserState = {setUserState}\r\n          saveData = {saveData}\r\n          setAddGroup={setAddGroup}\r\n          saveMemento = {saveMemento}\r\n        />\r\n      }\r\n    </>\r\n  );\r\n}","import '../styles/Task.scss';\r\nimport { TaskType, UserType } from '../types/types';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  setSelectedID: React.Dispatch<React.SetStateAction<string>>;\r\n  setEditTask: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setSelectedParentID: React.Dispatch<React.SetStateAction<string>>;\r\n  parentID: string;\r\n  task: TaskType;\r\n  index: number;\r\n}\r\n\r\nexport default function Task({\r\n  userState, setUserState, task, index, saveData, setEditTask, setSelectedID, parentID, setSelectedParentID\r\n}: props) {\r\n\r\n  const doTask = (id: string): void => {\r\n    // TODO: maybe add memento to doTask\r\n    const newUserState = {...userState};\r\n\r\n    const done = newUserState.tasks[id].done;\r\n    const count = newUserState.tasks[id].count;\r\n\r\n    if (count <= done) return;\r\n\r\n    newUserState.tasks[id].done++;\r\n    setUserState(newUserState);\r\n    saveData();\r\n  }\r\n\r\n  return (\r\n    <Draggable draggableId={task.id} index={index}>\r\n      {provided => (\r\n        <div className={\"Task\" + (task.count <= task.done ? \" completed\" : \"\")}\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <p\r\n            onClick={() => {setEditTask(true); setSelectedID(task.id); setSelectedParentID(parentID)}}\r\n          >{task.name}</p>\r\n          <div className=\"divider\"></div>\r\n          <p\r\n            onClick={() => doTask(task.id)}\r\n          >{task.done}/{task.count}</p>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n}","import '../styles/TaskList.scss';\r\nimport { TaskListType, UserType } from '../types/types';\r\nimport Task from './Task';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  setSelectedID: React.Dispatch<React.SetStateAction<string>>;\r\n  setEditList: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setAddTask: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setEditTask: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setSelectedParentID: React.Dispatch<React.SetStateAction<string>>;\r\n  parentID: string;\r\n  list: TaskListType;\r\n  listIndex: number;\r\n}\r\n\r\nexport default function TaskList({\r\n  userState, setUserState, list, listIndex, saveData, setAddTask, setEditList, setSelectedID, setEditTask, parentID, setSelectedParentID\r\n}: props) {\r\n  return (\r\n    <Draggable draggableId={list.id} index={listIndex}>\r\n      {(provided) =>\r\n        <div className=\"TaskList\"\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n        >\r\n          <div className=\"TaskList-title\"\r\n            {...provided.dragHandleProps}\r\n          >\r\n            <h3>{list.name}</h3>\r\n            <div className=\"divider\"></div>\r\n            <img src=\"icons/add.png\" alt=\"Add\"\r\n              onClick={() =>{ setAddTask(true); setSelectedID(list.id)}}\r\n            />\r\n            <img src=\"icons/more.png\" alt=\"More\"\r\n              onClick={() => {setEditList(true); setSelectedID(list.id); setSelectedParentID(parentID)}}\r\n            />\r\n          </div>\r\n          <Droppable droppableId={list.id} type=\"task\">\r\n            {provided => (\r\n              <div\r\n                className=\"Task-wrapper\"\r\n                ref={provided.innerRef}\r\n                {...provided.droppableProps}\r\n              >\r\n                {\r\n                  list.taskIDs.map((id, taskIndex) => \r\n                    <Task\r\n                      key={id}\r\n                      userState={userState}\r\n                      setUserState={setUserState}\r\n                      saveData = {saveData}\r\n                      setSelectedID={setSelectedID}\r\n                      setEditTask={setEditTask}\r\n                      setSelectedParentID={setSelectedParentID}\r\n                      parentID={list.id}\r\n                      task={userState.tasks[id]}\r\n                      index={taskIndex}\r\n                    />\r\n                  )\r\n                }\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </div>\r\n      }\r\n    </Draggable>\r\n  );\r\n}","import '../styles/TaskGroup.scss';\r\nimport { TaskGroupType, UserType } from '../types/types';\r\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\r\nimport TaskList from './TaskList';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  setSelectedID: React.Dispatch<React.SetStateAction<string>>;\r\n  setEditGroup: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setAddList: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setEditList: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setAddTask: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setEditTask: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setSelectedParentID: React.Dispatch<React.SetStateAction<string>>;\r\n  group: TaskGroupType;\r\n  groupIndex: number;\r\n}\r\n\r\nexport default function TaskGroup({\r\n  userState, setUserState, group, groupIndex, saveData, setAddList, setEditGroup, setSelectedID, setAddTask, setEditList, setEditTask, setSelectedParentID\r\n}: props) {\r\n  return (\r\n    <Draggable draggableId={group.id} index={groupIndex}>\r\n      {(provided) => \r\n        <div className=\"TaskGroup\"\r\n          {...provided.draggableProps}\r\n          ref={provided.innerRef}\r\n        >\r\n          <div className=\"TaskGroup-title\"\r\n            {...provided.dragHandleProps}\r\n          >\r\n            <h2>{group.name}</h2>\r\n            <div className=\"divider\"></div>\r\n            <img src=\"icons/add.png\" alt=\"Add\"\r\n              onClick={() =>{ setAddList(true); setSelectedID(group.id)}}\r\n            />\r\n            <img src=\"icons/more.png\" alt=\"More\"\r\n              onClick={() => {setEditGroup(true); setSelectedID(group.id)}}\r\n            />\r\n          </div>\r\n          <Droppable droppableId={group.id} type=\"list\">\r\n            {(provided) => \r\n              <div \r\n                className=\"TaskList-wrapper\"\r\n                ref={provided.innerRef}\r\n                {...provided.droppableProps}\r\n              >\r\n                {\r\n                  group.listIDs.map((id, listIndex) => \r\n                    <TaskList\r\n                      key={id}\r\n                      userState={userState}\r\n                      setUserState={setUserState}\r\n                      saveData = {saveData}\r\n                      setSelectedID={setSelectedID}\r\n                      setEditList={setEditList}\r\n                      setAddTask={setAddTask}\r\n                      setEditTask={setEditTask}\r\n                      setSelectedParentID={setSelectedParentID}\r\n                      parentID={group.id}\r\n                      list={userState.lists[id]}\r\n                      listIndex={listIndex}\r\n                    />\r\n                  )\r\n                }\r\n                {provided.placeholder}\r\n              </div>\r\n            }  \r\n            </Droppable>\r\n        </div>\r\n      }\r\n    </Draggable>\r\n  );\r\n}","import { useState } from 'react';\r\nimport { UserType } from '../types/types';\r\nimport { Reset } from '../types/enums';\r\n\r\nimport '../styles/Add&Edit.scss';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  setAddList: React.Dispatch<React.SetStateAction<boolean>>;\r\n  saveMemento: () => void;\r\n  groupID: string;\r\n}\r\n\r\nconst defaultInputs = {\r\n  name: \"\",\r\n  reset: Reset.NEVER,\r\n}\r\n\r\nexport default function AddList({\r\n  userState, setUserState, saveData, setAddList, groupID, saveMemento\r\n}: props) {\r\n  const closeWindow = (): void => {\r\n    setAddList(false);\r\n  }\r\n\r\n  const handleChange = (property: string, value: any): void => {\r\n    setInputState({...inputState, [property]: value});\r\n  }\r\n\r\n  const handleCreate = (): void => {\r\n    saveMemento();\r\n\r\n    let newUserState = {...userState};\r\n\r\n    let newID = (newUserState.nextID++).toString();\r\n    let newData = {...inputState, id: newID, taskIDs: []};\r\n\r\n    newUserState.lists[newID] = newData;\r\n    newUserState.groups[groupID].listIDs.push(newID);\r\n\r\n    setUserState({...newUserState});\r\n    setInputState(defaultInputs);\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const [inputState, setInputState] = useState(defaultInputs);\r\n\r\n  return (\r\n    <div className=\"Add\">\r\n      <div className=\"Add-bg\"\r\n        onClick={closeWindow}\r\n      ></div>\r\n      <div className=\"Add-main\">\r\n        <div className=\"Add-main-inputs\">\r\n          <div className=\"Add-main-inputs-name\">\r\n            <label>List Name</label>\r\n            <input \r\n              type=\"text\" \r\n              value={inputState.name} \r\n              onChange={(e) => handleChange(\"name\", e.target.value)} \r\n            />\r\n          </div>\r\n          <div className=\"Add-main-inputs-reset\">\r\n            <label>Resets</label>\r\n            <select \r\n              value={inputState.reset} \r\n              onChange={(e) => handleChange(\"reset\", e.target.value)} \r\n            >\r\n              <option value=\"never\">Never</option>\r\n              <option value=\"day\">Daily</option>\r\n              <option value=\"week\">Weekly</option>\r\n              <option value=\"month\">Monthly</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"Add-main-buttons\">\r\n          <h3\r\n            onClick={closeWindow}\r\n          >Cancel</h3>\r\n          <h3\r\n            onClick={handleCreate}\r\n          >Create</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { useState } from 'react';\r\nimport { UserType } from '../types/types';\r\n\r\nimport '../styles/Add&Edit.scss';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  setAddTask: React.Dispatch<React.SetStateAction<boolean>>;\r\n  saveMemento: () => void;\r\n  listID: string;\r\n}\r\n\r\nconst defaultInputs = {\r\n  name: \"\",\r\n  count: 1,\r\n}\r\n\r\nexport default function AddList({\r\n  userState, setUserState, saveData, setAddTask, listID, saveMemento\r\n}: props) {\r\n  const closeWindow = (): void => {\r\n    setAddTask(false);\r\n  }\r\n\r\n  const handleChange = (property: string, value: any): void => {\r\n    setInputState({...inputState, [property]: value});\r\n  }\r\n\r\n  const handleCreate = (): void => {\r\n    saveMemento();\r\n\r\n    let newUserState = {...userState};\r\n\r\n    let newID = (newUserState.nextID++).toString();\r\n    let newData = {...inputState, id: newID, done: 0};\r\n\r\n    newUserState.tasks[newID] = newData;\r\n    newUserState.lists[listID].taskIDs.push(newID);\r\n\r\n    setUserState({...newUserState});\r\n    setInputState(defaultInputs);\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const [inputState, setInputState] = useState(defaultInputs);\r\n\r\n  return (\r\n    <div className=\"Add\">\r\n      <div className=\"Add-bg\"\r\n        onClick={closeWindow}\r\n      ></div>\r\n      <div className=\"Add-main\">\r\n        <div className=\"Add-main-inputs\">\r\n          <div className=\"Add-main-inputs-name\">\r\n            <label>Task Name</label>\r\n            <input \r\n              type=\"text\" \r\n              value={inputState.name} \r\n              onChange={(e) => handleChange(\"name\", e.target.value)} \r\n            />\r\n          </div>\r\n          <div className=\"Add-main-inputs-count\">\r\n            <label>Repeat</label>\r\n            <input\r\n              type=\"number\" \r\n              value={inputState.count} \r\n              onChange={(e) => handleChange(\"count\", e.target.value.replace(/\\D/,''))} \r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"Add-main-buttons\">\r\n          <h3\r\n            onClick={closeWindow}\r\n          >Cancel</h3>\r\n          <h3\r\n            onClick={handleCreate}\r\n          >Create</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { useState } from 'react';\r\nimport { UserType } from '../types/types';\r\n\r\nimport '../styles/Add&Edit.scss';\r\nimport _ from 'lodash';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  setEditTask: React.Dispatch<React.SetStateAction<boolean>>;\r\n  saveMemento: () => void;\r\n  listID: string;\r\n  taskID: string;\r\n}\r\n\r\nexport default function AddGroup({\r\n  userState, setUserState, saveData, setEditTask, taskID, listID, saveMemento\r\n}: props) {\r\n  const closeWindow = (): void => {\r\n    setEditTask(false);\r\n  }\r\n\r\n  const handleChange = (property: string, value: any): void => {\r\n    setInputState({...inputState, [property]: value});\r\n  }\r\n\r\n  const handleSave = (): void => {\r\n    let oldData = userState.tasks[taskID];\r\n    let newData = {...oldData, ...inputState};\r\n    \r\n    if (_.isEqual(oldData, newData)) {\r\n      closeWindow();\r\n      return;  \r\n    };\r\n\r\n    saveMemento();\r\n\r\n    let newUserState = {...userState};\r\n    newUserState.tasks[taskID] = newData;\r\n\r\n    setUserState({...newUserState});\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const handleDelete = (): void => {\r\n    saveMemento();\r\n    \r\n    let newUserState = {...userState};\r\n\r\n    let newList = newUserState.lists[listID];\r\n\r\n    newList.taskIDs.splice(newList.taskIDs.indexOf(taskID), 1)\r\n    delete newUserState.tasks[taskID];\r\n\r\n    setUserState({...newUserState});\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const [inputState, setInputState] = useState(userState.tasks[taskID]);\r\n\r\n  return (\r\n    <div className=\"Edit\">\r\n      <div className=\"Edit-bg\"\r\n        onClick={closeWindow}\r\n      ></div>\r\n      <div className=\"Edit-main\">\r\n        <div className=\"Edit-main-inputs\">\r\n          <div className=\"Edit-main-inputs-name\">\r\n            <label>Task Name</label>\r\n            <input \r\n              type=\"text\" \r\n              value={inputState.name} \r\n              onChange={(e) => handleChange(\"name\", e.target.value)} \r\n            />\r\n          </div>\r\n          <div className=\"Edit-main-inputs-count\">\r\n            <label>Repeat</label>\r\n            <input\r\n              type=\"number\" \r\n              value={inputState.count} \r\n              onChange={(e) => handleChange(\"count\", parseInt(e.target.value.replace(/\\D/,'')))} \r\n            />\r\n          </div>\r\n          <div className=\"Add-main-inputs-done\">\r\n            <label>Done</label>\r\n            <input\r\n              type=\"number\" \r\n              value={inputState.done} \r\n              onChange={(e) => handleChange(\"done\", parseInt(e.target.value.replace(/\\D/,'')))} \r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"Edit-main-buttons\">\r\n          <h3\r\n            onClick={closeWindow}\r\n          >Cancel</h3>\r\n          <h3 className=\"Edit-main-buttons-delete\"\r\n            onClick={handleDelete}\r\n          >Delete</h3>\r\n          <h3\r\n            onClick={handleSave}\r\n          >Save</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { useState } from 'react';\r\nimport { UserType } from '../types/types';\r\n\r\nimport '../styles/Add&Edit.scss';\r\nimport _ from 'lodash';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  setEditGroup: React.Dispatch<React.SetStateAction<boolean>>;\r\n  saveMemento: () => void;\r\n  groupID: string;\r\n}\r\n\r\nexport default function EditGroup({\r\n  userState, setUserState, saveData, setEditGroup, groupID, saveMemento\r\n}: props) {\r\n  const closeWindow = (): void => {\r\n    setEditGroup(false);\r\n  }\r\n\r\n  const handleChange = (property: string, value: any): void => {\r\n    setInputState({...inputState, [property]: value});\r\n  }\r\n\r\n  const handleSave = (): void => {\r\n    let oldData = userState.groups[groupID];\r\n    let newData = {...oldData, ...inputState};\r\n    \r\n    if (_.isEqual(oldData, newData)) {\r\n      closeWindow();\r\n      return;  \r\n    };\r\n\r\n    saveMemento();\r\n    \r\n    let newUserState = {...userState};\r\n    newUserState.groups[groupID] = newData;\r\n\r\n    setUserState({...newUserState});\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const handleDelete = (): void => {\r\n    saveMemento();\r\n\r\n    let newUserState = {...userState};\r\n\r\n    const listIDs = newUserState.groups[groupID].listIDs;\r\n    const taskIDs = listIDs.flatMap((l) => newUserState.lists[l].taskIDs);\r\n\r\n    newUserState.groupIDs.splice(newUserState.groupIDs.indexOf(groupID), 1);\r\n    delete newUserState.groups[groupID];\r\n    listIDs.forEach(listID => {\r\n      delete newUserState.lists[listID];\r\n    });\r\n    taskIDs.forEach(taskID => {\r\n      delete newUserState.tasks[taskID];\r\n    });\r\n\r\n    setUserState({...newUserState});\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const [inputState, setInputState] = useState(userState.groups[groupID]);\r\n\r\n  return (\r\n    <div className=\"Edit\">\r\n      <div className=\"Edit-bg\"\r\n        onClick={closeWindow}\r\n      ></div>\r\n      <div className=\"Edit-main\">\r\n        <div className=\"Edit-main-inputs\">\r\n          <div className=\"Edit-main-inputs-name\">\r\n            <label>Group Name</label>\r\n            <input \r\n              type=\"text\" \r\n              value={inputState.name} \r\n              onChange={(e) => handleChange(\"name\", e.target.value)} \r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"Edit-main-buttons\">\r\n          <h3\r\n            onClick={closeWindow}\r\n          >Cancel</h3>\r\n          <h3 className=\"Edit-main-buttons-delete\"\r\n            onClick={handleDelete}\r\n          >Delete</h3>\r\n          <h3\r\n            onClick={handleSave}\r\n          >Save</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { useState } from 'react';\r\nimport { UserType } from '../types/types';\r\n\r\nimport '../styles/Add&Edit.scss';\r\nimport _ from 'lodash';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  setEditList: React.Dispatch<React.SetStateAction<boolean>>;\r\n  saveMemento: () => void;\r\n  groupID: string;\r\n  listID: string;\r\n}\r\n\r\nexport default function EditList({\r\n  userState, setUserState, saveData, setEditList, listID, groupID, saveMemento\r\n}: props) {\r\n  const closeWindow = (): void => {\r\n    setEditList(false);\r\n  }\r\n\r\n  const handleChange = (property: string, value: any): void => {\r\n    setInputState({...inputState, [property]: value});\r\n  }\r\n\r\n  const handleSave = (): void => {\r\n    let oldData = userState.lists[listID];\r\n    let newData = {...oldData, ...inputState};\r\n    \r\n    if (_.isEqual(oldData, newData)) {\r\n      closeWindow();\r\n      return;  \r\n    };\r\n\r\n    saveMemento();\r\n\r\n    let newUserState = {...userState};\r\n    newUserState.lists[listID] = newData;\r\n\r\n    setUserState({...newUserState});\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const handleDelete = (): void => {\r\n    saveMemento();\r\n\r\n    let newUserState = {...userState};\r\n\r\n    const taskIDs = newUserState.lists[listID].taskIDs;\r\n\r\n    let newGroup = newUserState.groups[groupID];\r\n\r\n    newGroup.listIDs.splice(newGroup.listIDs.indexOf(listID), 1)\r\n    delete newUserState.lists[listID];\r\n    taskIDs.forEach(taskID => {\r\n      delete newUserState.tasks[taskID];\r\n    });\r\n\r\n    setUserState({...newUserState});\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const [inputState, setInputState] = useState(userState.lists[listID]);\r\n\r\n  return (\r\n    <div className=\"Edit\">\r\n      <div className=\"Edit-bg\"\r\n        onClick={closeWindow}\r\n      ></div>\r\n      <div className=\"Edit-main\">\r\n        <div className=\"Edit-main-inputs\">\r\n          <div className=\"Edit-main-inputs-name\">\r\n            <label>List Name</label>\r\n            <input \r\n              type=\"text\" \r\n              value={inputState.name} \r\n              onChange={(e) => handleChange(\"name\", e.target.value)} \r\n            />\r\n          </div>\r\n          <div className=\"Edit-main-inputs-reset\">\r\n            <label>Resets</label>\r\n            <select \r\n              value={inputState.reset} \r\n              onChange={(e) => handleChange(\"reset\", e.target.value)} \r\n            >\r\n              <option value=\"never\">Never</option>\r\n              <option value=\"day\">Daily</option>\r\n              <option value=\"week\">Weekly</option>\r\n              <option value=\"month\">Monthly</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"Edit-main-buttons\">\r\n          <h3\r\n            onClick={closeWindow}\r\n          >Cancel</h3>\r\n          <h3 className=\"Edit-main-buttons-delete\"\r\n            onClick={handleDelete}\r\n          >Delete</h3>\r\n          <h3\r\n            onClick={handleSave}\r\n          >Save</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import '../styles/TaskField.scss';\r\n\r\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\r\nimport { UserType } from '../types/types';\r\nimport TaskGroup from './TaskGroup';\r\nimport { useState } from 'react';\r\nimport AddList from './AddList';\r\nimport AddTask from './AddTask';\r\nimport EditTask from './EditTask';\r\nimport EditGroup from './EditGroup';\r\nimport EditList from './EditList';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  saveMemento: () => void;\r\n}\r\n\r\nexport default function TaskField({\r\n  userState, setUserState, saveData, saveMemento\r\n}: props) {\r\n  const onDragEnd = (result: DropResult) => {\r\n    const { destination, source, draggableId, type } = result;\r\n\r\n    if (!destination) return;\r\n    \r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) return;\r\n\r\n    saveMemento();\r\n\r\n    const newUserState = {...userState};\r\n\r\n    switch (type) {\r\n      case \"task\":\r\n        const sourceList = newUserState.lists[source.droppableId];\r\n        sourceList.taskIDs.splice(source.index, 1);\r\n\r\n        const destinationList = newUserState.lists[destination.droppableId];\r\n        destinationList.taskIDs.splice(destination.index, 0, draggableId);\r\n        break;\r\n\r\n      case \"list\":\r\n        const sourceGroup = newUserState.groups[source.droppableId];\r\n        sourceGroup.listIDs.splice(source.index, 1);\r\n\r\n        const destinationGroup = newUserState.groups[destination.droppableId];\r\n        destinationGroup.listIDs.splice(destination.index, 0, draggableId);\r\n        break;\r\n\r\n      case \"group\":\r\n        newUserState.groupIDs.splice(source.index, 1);\r\n        newUserState.groupIDs.splice(destination.index, 0, draggableId);\r\n        break;\r\n    }\r\n\r\n    setUserState(newUserState);\r\n    saveData();\r\n  }\r\n\r\n  const [editGroup, setEditGroup] = useState(false);\r\n  const [addList, setAddList] = useState(false);\r\n  const [editList, setEditList] = useState(false);\r\n  const [addTask, setAddTask] = useState(false);\r\n  const [editTask, setEditTask] = useState(false);\r\n  const [selectedID, setSelectedID] = useState(\"\");\r\n  const [selectedParentID, setSelectedParentID] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable \r\n          droppableId=\"field\"\r\n          direction=\"horizontal\"\r\n          type=\"group\"\r\n        > \r\n          {(provided) =>\r\n            <div className=\"TaskField\"\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              { \r\n                userState.groupIDs.map((id, groupIndex) => \r\n                  <TaskGroup\r\n                    key={id}\r\n                    userState={userState}\r\n                    setUserState={setUserState}\r\n                    saveData = {saveData}\r\n                    setSelectedID={setSelectedID}\r\n                    setEditGroup={setEditGroup}\r\n                    setAddList={setAddList}\r\n                    setEditList={setEditList}\r\n                    setAddTask={setAddTask}\r\n                    setEditTask={setEditTask}\r\n                    setSelectedParentID={setSelectedParentID}\r\n                    group={userState.groups[id]}\r\n                    groupIndex={groupIndex}\r\n                  />\r\n                )\r\n              }\r\n              {provided.placeholder}\r\n            </div>\r\n          }\r\n        </Droppable>\r\n      </DragDropContext>\r\n      {\r\n        editGroup &&\r\n        <EditGroup \r\n          userState={userState}\r\n          setUserState={setUserState}\r\n          saveData={saveData}\r\n          setEditGroup={setEditGroup}\r\n          saveMemento = {saveMemento}\r\n          groupID={selectedID}\r\n        />\r\n      }\r\n      {\r\n        addList &&\r\n        <AddList \r\n          userState={userState}\r\n          setUserState={setUserState}\r\n          saveData={saveData}\r\n          setAddList={setAddList}\r\n          saveMemento = {saveMemento}\r\n          groupID={selectedID}\r\n        />\r\n      }\r\n      {\r\n        editList &&\r\n        <EditList \r\n          userState={userState}\r\n          setUserState={setUserState}\r\n          saveData={saveData}\r\n          setEditList={setEditList}\r\n          saveMemento = {saveMemento}\r\n          groupID={selectedParentID}\r\n          listID={selectedID}\r\n        />\r\n      }\r\n      {\r\n        addTask &&\r\n        <AddTask \r\n          userState={userState}\r\n          setUserState={setUserState}\r\n          saveData={saveData}\r\n          setAddTask={setAddTask}\r\n          saveMemento = {saveMemento}\r\n          listID={selectedID}\r\n        />\r\n      }\r\n      {\r\n        editTask &&\r\n        <EditTask \r\n          userState={userState}\r\n          setUserState={setUserState}\r\n          saveData={saveData}\r\n          setEditTask={setEditTask}\r\n          saveMemento = {saveMemento}\r\n          listID={selectedParentID}\r\n          taskID={selectedID}\r\n        />\r\n      }\r\n    </>\r\n  );\r\n}","import dayjs from 'dayjs';\r\nimport { useState } from 'react';\r\nimport '../styles/App.scss';\r\nimport { Reset } from \"../types/enums\";\r\nimport { UserType } from \"../types/types\";\r\nimport Header from \"./Header\";\r\nimport TaskField from \"./TaskField\";\r\n\r\nimport updateLocale from 'dayjs/plugin/updateLocale';\r\ndayjs.extend(updateLocale);\r\n\r\ndayjs.updateLocale('en', {\r\n  weekStart: 1,\r\n});\r\n\r\nexport default function App() {\r\n  const saveData = (userData: UserType = userState): void => {\r\n    localStorage.setItem(\"user\", JSON.stringify(userData));\r\n  }\r\n\r\n  const loadData = (): UserType => {\r\n    const localUser = localStorage.getItem(\"user\");\r\n    let user: UserType = localUser ? JSON.parse(localUser) : {\r\n      lastLogin: Date.now(),\r\n      nextID: 10,\r\n      groupIDs: [\"1\", \"2\", \"3\"], \r\n      groups: {\r\n        \"1\": {id: \"1\", name: \"Home\", listIDs: [\"4\", \"6\"]},\r\n        \"2\": {id: \"2\", name: \"Outside\", listIDs: [\"5\"]},\r\n        \"3\": {id: \"3\", name: \"Monkey\", listIDs: []}\r\n      },\r\n      lists: {\r\n        \"4\": {id: \"4\", name: \"Daily\", reset: Reset.DAY, taskIDs: [\"7\", \"8\"]},\r\n        \"5\": {id: \"5\", name: \"Weekly\", reset: Reset.WEEK, taskIDs: []},\r\n        \"6\": {id: \"6\", name: \"Hotel?\", reset: Reset.NEVER, taskIDs: [\"9\"]}\r\n      },\r\n      tasks: {\r\n        \"7\": {id: \"7\", name: \"Dishes\", done: 0, count: 1},\r\n        \"8\": {id: \"8\", name: \"Study\", done: 5, count: 8},\r\n        \"9\": {id: \"9\", name: \"Trivago.\", done: 0, count: 3}\r\n      },\r\n    };\r\n\r\n    const now = Date.now() //1639151497000;\r\n\r\n    const d1 = dayjs(user.lastLogin);\r\n    const d2 = dayjs(now);\r\n\r\n    const sameMonth = d1.isSame(d2, \"month\");\r\n    const sameWeek = d1.isSame(d2, \"week\");\r\n    const sameDay = d1.isSame(d2, \"day\");\r\n\r\n    console.log(d1, d2)\r\n    console.log(sameDay, sameWeek, sameMonth);\r\n    console.log(d1.locale())\r\n\r\n    for (const listID in user.lists) {\r\n      const list = user.lists[listID];\r\n      if (\r\n        (list.reset === \"day\" && !sameDay) ||\r\n        (list.reset === \"week\" && !sameWeek) ||\r\n        (list.reset === \"month\" && !sameMonth)\r\n      ) {\r\n        resetTasks(user, list.taskIDs);\r\n      }\r\n    }\r\n    \r\n    user.lastLogin = now;\r\n    saveData(user);\r\n\r\n    return user;\r\n  }\r\n\r\n  const resetTasks = (user: UserType, taskIDs: string[]): void  => {\r\n    for (const taskID of taskIDs) {\r\n      user.tasks[taskID].done = 0;\r\n    }\r\n  }\r\n\r\n  const saveMemento = (): void => {\r\n    const newMementos = [...mementos];\r\n    newMementos.splice(mementoIndex);\r\n    newMementos.push(JSON.stringify(userState));\r\n    const newMementoIndex = mementoIndex + 1;\r\n\r\n    setMementos([...newMementos]);\r\n    setMementoIndex(newMementoIndex);\r\n  }\r\n\r\n  const [userState, setUserState] = useState(loadData());\r\n  const [mementos, setMementos] = useState([] as string[]);\r\n  const [mementoIndex, setMementoIndex] = useState(0);\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <Header \r\n        userState = {userState}\r\n        setUserState = {setUserState}\r\n        saveData = {saveData}\r\n        mementos = {mementos}\r\n        setMementos = {setMementos}\r\n        mementoIndex = {mementoIndex}\r\n        setMementoIndex = {setMementoIndex}\r\n        saveMemento={saveMemento}\r\n      />\r\n      <TaskField \r\n        userState = {userState}\r\n        setUserState = {setUserState}\r\n        saveData = {saveData}\r\n        saveMemento = {saveMemento}\r\n      />\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.scss';\n\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}
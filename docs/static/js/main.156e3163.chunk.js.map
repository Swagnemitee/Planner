{"version":3,"sources":["types/enums.ts","components/AddGroup.tsx","components/Header.tsx","components/Task.tsx","components/TaskList.tsx","components/TaskGroup.tsx","components/AddList.tsx","components/AddTask.tsx","components/EditTask.tsx","components/EditGroup.tsx","components/EditList.tsx","components/TaskField.tsx","components/App.tsx","index.tsx"],"names":["Reset","defaultInputs","name","AddGroup","userState","setUserState","saveData","setAddGroup","saveMemento","closeWindow","useState","inputState","setInputState","className","onClick","type","value","onChange","e","property","target","newUserState","newID","nextID","toString","newData","id","listIDs","groups","groupIDs","push","Header","mementos","setMementos","mementoIndex","setMementoIndex","undoDisabled","redoDisabled","length","addGroup","src","alt","newMementos","undefined","JSON","stringify","newMementoIndex","parse","href","rel","Task","task","index","setEditTask","setSelectedID","parentID","setSelectedParentID","draggableId","provided","count","done","ref","innerRef","draggableProps","dragHandleProps","tasks","doTask","TaskList","list","listIndex","setAddTask","setEditList","reset","NEVER","toLowerCase","listReset","droppableId","droppableProps","taskIDs","map","taskIndex","placeholder","TaskGroup","group","groupIndex","setAddList","setEditGroup","lists","AddList","groupID","handleChange","listID","replace","taskID","parseInt","newList","splice","indexOf","oldData","_","isEqual","EditGroup","flatMap","l","forEach","EditList","newGroup","TaskField","editGroup","addList","editList","addTask","editTask","selectedID","selectedParentID","onDragEnd","result","destination","source","direction","App","userData","localStorage","setItem","resetTasks","user","localUser","getItem","defaultUser","now","Date","d1","dayjs","lastLogin","d2","sameMonth","isSame","sameWeek","sameDay","loadData","extend","updateLocale","weekStart","DAY","WEEK","MONTH","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.156e3163.chunk.js","sourcesContent":["export enum Reset {\r\n  NEVER = \"never\",\r\n  DAY = \"day\",\r\n  WEEK = \"week\",\r\n  MONTH = \"month\",\r\n}","import { useState } from 'react';\r\nimport { UserType } from '../types/types';\r\n\r\nimport '../styles/Add&Edit.scss';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  setAddGroup: React.Dispatch<React.SetStateAction<boolean>>;\r\n  saveMemento: () => void;\r\n}\r\n\r\nconst defaultInputs = {\r\n  name: \"\",\r\n}\r\n\r\nexport default function AddGroup({\r\n  userState, setUserState, saveData, setAddGroup, saveMemento\r\n}: props) {\r\n  const closeWindow = (): void => {\r\n    setAddGroup(false);\r\n  }\r\n\r\n  const handleChange = (property: string, value: any): void => {\r\n    setInputState({...inputState, [property]: value});\r\n  }\r\n\r\n  const handleCreate = (): void => {\r\n    saveMemento();\r\n    \r\n    let newUserState = {...userState};\r\n\r\n    let newID = (newUserState.nextID++).toString();\r\n    let newData = {...inputState, id: newID, listIDs: []};\r\n\r\n    newUserState.groups[newID] = newData;\r\n    newUserState.groupIDs.push(newID);\r\n\r\n    setUserState({...newUserState});\r\n    setInputState(defaultInputs);\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const [inputState, setInputState] = useState(defaultInputs);\r\n\r\n  return (\r\n    <div className=\"Add\">\r\n      <div className=\"Add-bg\"\r\n        onClick={closeWindow}\r\n      ></div>\r\n      <div className=\"Add-main\">\r\n        <div className=\"Add-main-inputs\">\r\n          <div className=\"Add-main-inputs-name\">\r\n            <label>Group Name</label>\r\n            <input \r\n              type=\"text\" \r\n              value={inputState.name} \r\n              onChange={(e) => handleChange(\"name\", e.target.value)} \r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"Add-main-buttons\">\r\n          <h3\r\n            onClick={closeWindow}\r\n          >Cancel</h3>\r\n          <h3\r\n            onClick={handleCreate}\r\n          >Create</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { useState } from 'react';\r\nimport '../styles/Header.scss';\r\nimport { UserType } from '../types/types';\r\nimport AddGroup from './AddGroup';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  mementos: string[];\r\n  setMementos: React.Dispatch<React.SetStateAction<string[]>>;\r\n  mementoIndex: number;\r\n  setMementoIndex: React.Dispatch<React.SetStateAction<number>>;\r\n  saveMemento: () => void;\r\n}\r\n\r\nexport default function Header({\r\n  userState, setUserState, saveData, mementos, setMementos, mementoIndex, setMementoIndex, saveMemento\r\n}: props) {\r\n  const undo = (): void => {\r\n    if (undoDisabled()) return;\r\n    const newMementos = [...mementos];\r\n    if (newMementos[mementoIndex] === undefined) {\r\n      newMementos[mementoIndex] = JSON.stringify(userState);\r\n      setMementos(newMementos);\r\n    }\r\n\r\n    const newMementoIndex = mementoIndex - 1; \r\n    const newUserState = JSON.parse(mementos[newMementoIndex]);\r\n\r\n    setUserState({...newUserState});\r\n    setMementoIndex(newMementoIndex);\r\n    saveData();\r\n  }\r\n\r\n  const redo = (): void => {\r\n    if (redoDisabled()) return;\r\n    const newMementoIndex = mementoIndex + 1; \r\n    const newUserState = JSON.parse(mementos[newMementoIndex]);\r\n\r\n    setUserState({...newUserState});\r\n    setMementoIndex(newMementoIndex);\r\n    saveData();\r\n  }\r\n\r\n  const undoDisabled = (): boolean => {\r\n    return mementoIndex === 0;\r\n  }\r\n\r\n  const redoDisabled = (): boolean => {\r\n    return mementoIndex >= mementos.length-1;\r\n  }\r\n\r\n  const [addGroup, setAddGroup] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n        <img src=\"icons/undo.png\" alt=\"Undo\" className={undoDisabled() ? \"disabled\" : \"\"}\r\n          onClick={undo}\r\n        />\r\n        <img src=\"icons/redo.png\" alt=\"Redo\" className={redoDisabled() ? \"disabled\" : \"\"}\r\n          onClick={redo}\r\n        />\r\n        <div className=\"divider\"></div>\r\n        <img src=\"icons/add.png\" alt=\"Add\"\r\n          onClick={() => setAddGroup(true)}\r\n        />\r\n      </header>\r\n      <header className=\"second\">\r\n        <a href=\"https://github.com/Swagnemitee/Planner#how-to-use\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <img src=\"icons/help.png\" alt=\"Help\"></img>\r\n        </a>\r\n      </header>\r\n      {\r\n        addGroup &&\r\n        <AddGroup\r\n          userState = {userState}\r\n          setUserState = {setUserState}\r\n          saveData = {saveData}\r\n          setAddGroup={setAddGroup}\r\n          saveMemento = {saveMemento}\r\n        />\r\n      }\r\n    </>\r\n  );\r\n}","import '../styles/Task.scss';\r\nimport { TaskType, UserType } from '../types/types';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  saveMemento: () => void;\r\n  setSelectedID: React.Dispatch<React.SetStateAction<string>>;\r\n  setEditTask: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setSelectedParentID: React.Dispatch<React.SetStateAction<string>>;\r\n  parentID: string;\r\n  task: TaskType;\r\n  index: number;\r\n}\r\n\r\nexport default function Task({\r\n  userState, setUserState, task, index, saveData, setEditTask, setSelectedID, parentID, setSelectedParentID, saveMemento\r\n}: props) {\r\n\r\n  const doTask = (id: string): void => {\r\n    saveMemento();\r\n\r\n    const newUserState = {...userState};\r\n\r\n    const done = newUserState.tasks[id].done;\r\n    const count = newUserState.tasks[id].count;\r\n\r\n    if (count <= done) return;\r\n\r\n    newUserState.tasks[id].done++;\r\n    setUserState(newUserState);\r\n    saveData();\r\n  }\r\n\r\n  return (\r\n    <Draggable draggableId={task.id} index={index}>\r\n      {provided => (\r\n        <div className={\"Task\" + (task.count <= task.done ? \" completed\" : \"\")}\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <p\r\n            onClick={() => {setEditTask(true); setSelectedID(task.id); setSelectedParentID(parentID)}}\r\n          >{task.name}</p>\r\n          <div className=\"divider\"></div>\r\n          <p\r\n            onClick={() => doTask(task.id)}\r\n          >{task.done}/{task.count}</p>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n}","import '../styles/TaskList.scss';\r\nimport { TaskListType, UserType } from '../types/types';\r\nimport { Reset } from '../types/enums';\r\nimport Task from './Task';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  saveMemento: () => void;\r\n  setSelectedID: React.Dispatch<React.SetStateAction<string>>;\r\n  setEditList: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setAddTask: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setEditTask: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setSelectedParentID: React.Dispatch<React.SetStateAction<string>>;\r\n  parentID: string;\r\n  list: TaskListType;\r\n  listIndex: number;\r\n}\r\n\r\nexport default function TaskList({\r\n  userState, setUserState, list, listIndex, saveData, setAddTask, setEditList, setSelectedID, setEditTask, parentID, setSelectedParentID, saveMemento\r\n}: props) {\r\n  return (\r\n    <Draggable draggableId={list.id} index={listIndex}>\r\n      {(provided) =>\r\n        <div className=\"TaskList\"\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n        >\r\n          <div className=\"TaskList-title\"\r\n            {...provided.dragHandleProps}\r\n          > \r\n            {\r\n              list.reset === Reset.NEVER ||\r\n              list.name.toLowerCase() === listReset[list.reset].toLowerCase() ? \r\n              <h3>{list.name}</h3> :\r\n              <h3>{list.name}<span> • {listReset[list.reset]}</span></h3>\r\n            }\r\n            <div className=\"divider\"></div>\r\n            <img src=\"icons/add.png\" alt=\"Add\"\r\n              onClick={() =>{ setAddTask(true); setSelectedID(list.id)}}\r\n            />\r\n            <img src=\"icons/more.png\" alt=\"More\"\r\n              onClick={() => {setEditList(true); setSelectedID(list.id); setSelectedParentID(parentID)}}\r\n            />\r\n          </div>\r\n          <Droppable droppableId={list.id} type=\"task\">\r\n            {provided => (\r\n              <div\r\n                className=\"Task-wrapper\"\r\n                ref={provided.innerRef}\r\n                {...provided.droppableProps}\r\n              >\r\n                {\r\n                  list.taskIDs.map((id, taskIndex) => \r\n                    <Task\r\n                      key={id}\r\n                      userState={userState}\r\n                      setUserState={setUserState}\r\n                      saveData = {saveData}\r\n                      saveMemento = {saveMemento}\r\n                      setSelectedID={setSelectedID}\r\n                      setEditTask={setEditTask}\r\n                      setSelectedParentID={setSelectedParentID}\r\n                      parentID={list.id}\r\n                      task={userState.tasks[id]}\r\n                      index={taskIndex}\r\n                    />\r\n                  )\r\n                }\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </div>\r\n      }\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nconst listReset: {[key in \"day\" | \"week\" | \"month\"]: string} = {\r\n  \"day\": \"daily\",\r\n  \"week\": \"weekly\",\r\n  \"month\": \"monthly\"\r\n}","import '../styles/TaskGroup.scss';\r\nimport { TaskGroupType, UserType } from '../types/types';\r\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\r\nimport TaskList from './TaskList';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  saveMemento: () => void;\r\n  setSelectedID: React.Dispatch<React.SetStateAction<string>>;\r\n  setEditGroup: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setAddList: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setEditList: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setAddTask: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setEditTask: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setSelectedParentID: React.Dispatch<React.SetStateAction<string>>;\r\n  group: TaskGroupType;\r\n  groupIndex: number;\r\n}\r\n\r\nexport default function TaskGroup({\r\n  userState, setUserState, group, groupIndex, saveData, setAddList, setEditGroup, setSelectedID, setAddTask, setEditList, setEditTask, setSelectedParentID, saveMemento\r\n}: props) {\r\n  return (\r\n    <Draggable draggableId={group.id} index={groupIndex}>\r\n      {(provided) => \r\n        <div className=\"TaskGroup\"\r\n          {...provided.draggableProps}\r\n          ref={provided.innerRef}\r\n        >\r\n          <div className=\"TaskGroup-title\"\r\n            {...provided.dragHandleProps}\r\n          >\r\n            <h2>{group.name}</h2>\r\n            <div className=\"divider\"></div>\r\n            <img src=\"icons/add.png\" alt=\"Add\"\r\n              onClick={() =>{ setAddList(true); setSelectedID(group.id)}}\r\n            />\r\n            <img src=\"icons/more.png\" alt=\"More\"\r\n              onClick={() => {setEditGroup(true); setSelectedID(group.id)}}\r\n            />\r\n          </div>\r\n          <Droppable droppableId={group.id} type=\"list\">\r\n            {(provided) => \r\n              <div \r\n                className=\"TaskList-wrapper\"\r\n                ref={provided.innerRef}\r\n                {...provided.droppableProps}\r\n              >\r\n                {\r\n                  group.listIDs.map((id, listIndex) => \r\n                    <TaskList\r\n                      key={id}\r\n                      userState={userState}\r\n                      setUserState={setUserState}\r\n                      saveData = {saveData}\r\n                      saveMemento = {saveMemento}\r\n                      setSelectedID={setSelectedID}\r\n                      setEditList={setEditList}\r\n                      setAddTask={setAddTask}\r\n                      setEditTask={setEditTask}\r\n                      setSelectedParentID={setSelectedParentID}\r\n                      parentID={group.id}\r\n                      list={userState.lists[id]}\r\n                      listIndex={listIndex}\r\n                    />\r\n                  )\r\n                }\r\n                {provided.placeholder}\r\n              </div>\r\n            }  \r\n            </Droppable>\r\n        </div>\r\n      }\r\n    </Draggable>\r\n  );\r\n}","import { useState } from 'react';\r\nimport { UserType } from '../types/types';\r\nimport { Reset } from '../types/enums';\r\n\r\nimport '../styles/Add&Edit.scss';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  setAddList: React.Dispatch<React.SetStateAction<boolean>>;\r\n  saveMemento: () => void;\r\n  groupID: string;\r\n}\r\n\r\nconst defaultInputs = {\r\n  name: \"\",\r\n  reset: Reset.NEVER,\r\n}\r\n\r\nexport default function AddList({\r\n  userState, setUserState, saveData, setAddList, groupID, saveMemento\r\n}: props) {\r\n  const closeWindow = (): void => {\r\n    setAddList(false);\r\n  }\r\n\r\n  const handleChange = (property: string, value: any): void => {\r\n    setInputState({...inputState, [property]: value});\r\n  }\r\n\r\n  const handleCreate = (): void => {\r\n    saveMemento();\r\n\r\n    let newUserState = {...userState};\r\n\r\n    let newID = (newUserState.nextID++).toString();\r\n    let newData = {...inputState, id: newID, taskIDs: []};\r\n\r\n    newUserState.lists[newID] = newData;\r\n    newUserState.groups[groupID].listIDs.push(newID);\r\n\r\n    setUserState({...newUserState});\r\n    setInputState(defaultInputs);\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const [inputState, setInputState] = useState(defaultInputs);\r\n\r\n  return (\r\n    <div className=\"Add\">\r\n      <div className=\"Add-bg\"\r\n        onClick={closeWindow}\r\n      ></div>\r\n      <div className=\"Add-main\">\r\n        <div className=\"Add-main-inputs\">\r\n          <div className=\"Add-main-inputs-name\">\r\n            <label>List Name</label>\r\n            <input \r\n              type=\"text\" \r\n              value={inputState.name} \r\n              onChange={(e) => handleChange(\"name\", e.target.value)} \r\n            />\r\n          </div>\r\n          <div className=\"Add-main-inputs-reset\">\r\n            <label>Resets</label>\r\n            <select \r\n              value={inputState.reset} \r\n              onChange={(e) => handleChange(\"reset\", e.target.value)} \r\n            >\r\n              <option value=\"never\">Never</option>\r\n              <option value=\"day\">Daily</option>\r\n              <option value=\"week\">Weekly</option>\r\n              <option value=\"month\">Monthly</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"Add-main-buttons\">\r\n          <h3\r\n            onClick={closeWindow}\r\n          >Cancel</h3>\r\n          <h3\r\n            onClick={handleCreate}\r\n          >Create</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { useState } from 'react';\r\nimport { UserType } from '../types/types';\r\n\r\nimport '../styles/Add&Edit.scss';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  setAddTask: React.Dispatch<React.SetStateAction<boolean>>;\r\n  saveMemento: () => void;\r\n  listID: string;\r\n}\r\n\r\nconst defaultInputs = {\r\n  name: \"\",\r\n  count: 1,\r\n}\r\n\r\nexport default function AddList({\r\n  userState, setUserState, saveData, setAddTask, listID, saveMemento\r\n}: props) {\r\n  const closeWindow = (): void => {\r\n    setAddTask(false);\r\n  }\r\n\r\n  const handleChange = (property: string, value: any): void => {\r\n    setInputState({...inputState, [property]: value});\r\n  }\r\n\r\n  const handleCreate = (): void => {\r\n    saveMemento();\r\n\r\n    let newUserState = {...userState};\r\n\r\n    let newID = (newUserState.nextID++).toString();\r\n    let newData = {...inputState, id: newID, done: 0};\r\n\r\n    newUserState.tasks[newID] = newData;\r\n    newUserState.lists[listID].taskIDs.push(newID);\r\n\r\n    setUserState({...newUserState});\r\n    setInputState(defaultInputs);\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const [inputState, setInputState] = useState(defaultInputs);\r\n\r\n  return (\r\n    <div className=\"Add\">\r\n      <div className=\"Add-bg\"\r\n        onClick={closeWindow}\r\n      ></div>\r\n      <div className=\"Add-main\">\r\n        <div className=\"Add-main-inputs\">\r\n          <div className=\"Add-main-inputs-name\">\r\n            <label>Task Name</label>\r\n            <input \r\n              type=\"text\" \r\n              value={inputState.name} \r\n              onChange={(e) => handleChange(\"name\", e.target.value)} \r\n            />\r\n          </div>\r\n          <div className=\"Add-main-inputs-count\">\r\n            <label>Repeat</label>\r\n            <input\r\n              type=\"number\" \r\n              value={inputState.count} \r\n              onChange={(e) => handleChange(\"count\", e.target.value.replace(/\\D/,''))} \r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"Add-main-buttons\">\r\n          <h3\r\n            onClick={closeWindow}\r\n          >Cancel</h3>\r\n          <h3\r\n            onClick={handleCreate}\r\n          >Create</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { useState } from 'react';\r\nimport { UserType } from '../types/types';\r\n\r\nimport '../styles/Add&Edit.scss';\r\nimport _ from 'lodash';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  setEditTask: React.Dispatch<React.SetStateAction<boolean>>;\r\n  saveMemento: () => void;\r\n  listID: string;\r\n  taskID: string;\r\n}\r\n\r\nexport default function AddGroup({\r\n  userState, setUserState, saveData, setEditTask, taskID, listID, saveMemento\r\n}: props) {\r\n  const closeWindow = (): void => {\r\n    setEditTask(false);\r\n  }\r\n\r\n  const handleChange = (property: string, value: any): void => {\r\n    setInputState({...inputState, [property]: value});\r\n  }\r\n\r\n  const handleSave = (): void => {\r\n    let oldData = userState.tasks[taskID];\r\n    let newData = {...oldData, ...inputState};\r\n    \r\n    if (_.isEqual(oldData, newData)) {\r\n      closeWindow();\r\n      return;  \r\n    };\r\n\r\n    saveMemento();\r\n\r\n    let newUserState = {...userState};\r\n    newUserState.tasks[taskID] = newData;\r\n\r\n    setUserState({...newUserState});\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const handleDelete = (): void => {\r\n    saveMemento();\r\n    \r\n    let newUserState = {...userState};\r\n\r\n    let newList = newUserState.lists[listID];\r\n\r\n    newList.taskIDs.splice(newList.taskIDs.indexOf(taskID), 1)\r\n    delete newUserState.tasks[taskID];\r\n\r\n    setUserState({...newUserState});\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const [inputState, setInputState] = useState(userState.tasks[taskID]);\r\n\r\n  return (\r\n    <div className=\"Edit\">\r\n      <div className=\"Edit-bg\"\r\n        onClick={closeWindow}\r\n      ></div>\r\n      <div className=\"Edit-main\">\r\n        <div className=\"Edit-main-inputs\">\r\n          <div className=\"Edit-main-inputs-name\">\r\n            <label>Task Name</label>\r\n            <input \r\n              type=\"text\" \r\n              value={inputState.name} \r\n              onChange={(e) => handleChange(\"name\", e.target.value)} \r\n            />\r\n          </div>\r\n          <div className=\"Edit-main-inputs-count\">\r\n            <label>Repeat</label>\r\n            <input\r\n              type=\"number\" \r\n              value={inputState.count} \r\n              onChange={(e) => handleChange(\"count\", parseInt(e.target.value.replace(/\\D/,'')))} \r\n            />\r\n          </div>\r\n          <div className=\"Add-main-inputs-done\">\r\n            <label>Done</label>\r\n            <input\r\n              type=\"number\" \r\n              value={inputState.done} \r\n              onChange={(e) => handleChange(\"done\", parseInt(e.target.value.replace(/\\D/,'')))} \r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"Edit-main-buttons\">\r\n          <h3\r\n            onClick={closeWindow}\r\n          >Cancel</h3>\r\n          <h3 className=\"Edit-main-buttons-delete\"\r\n            onClick={handleDelete}\r\n          >Delete</h3>\r\n          <h3\r\n            onClick={handleSave}\r\n          >Save</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { useState } from 'react';\r\nimport { UserType } from '../types/types';\r\n\r\nimport '../styles/Add&Edit.scss';\r\nimport _ from 'lodash';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  setEditGroup: React.Dispatch<React.SetStateAction<boolean>>;\r\n  saveMemento: () => void;\r\n  groupID: string;\r\n}\r\n\r\nexport default function EditGroup({\r\n  userState, setUserState, saveData, setEditGroup, groupID, saveMemento\r\n}: props) {\r\n  const closeWindow = (): void => {\r\n    setEditGroup(false);\r\n  }\r\n\r\n  const handleChange = (property: string, value: any): void => {\r\n    setInputState({...inputState, [property]: value});\r\n  }\r\n\r\n  const handleSave = (): void => {\r\n    let oldData = userState.groups[groupID];\r\n    let newData = {...oldData, ...inputState};\r\n    \r\n    if (_.isEqual(oldData, newData)) {\r\n      closeWindow();\r\n      return;  \r\n    };\r\n\r\n    saveMemento();\r\n    \r\n    let newUserState = {...userState};\r\n    newUserState.groups[groupID] = newData;\r\n\r\n    setUserState({...newUserState});\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const handleDelete = (): void => {\r\n    saveMemento();\r\n\r\n    let newUserState = {...userState};\r\n\r\n    const listIDs = newUserState.groups[groupID].listIDs;\r\n    const taskIDs = listIDs.flatMap((l) => newUserState.lists[l].taskIDs);\r\n\r\n    newUserState.groupIDs.splice(newUserState.groupIDs.indexOf(groupID), 1);\r\n    delete newUserState.groups[groupID];\r\n    listIDs.forEach(listID => {\r\n      delete newUserState.lists[listID];\r\n    });\r\n    taskIDs.forEach(taskID => {\r\n      delete newUserState.tasks[taskID];\r\n    });\r\n\r\n    setUserState({...newUserState});\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const [inputState, setInputState] = useState(userState.groups[groupID]);\r\n\r\n  return (\r\n    <div className=\"Edit\">\r\n      <div className=\"Edit-bg\"\r\n        onClick={closeWindow}\r\n      ></div>\r\n      <div className=\"Edit-main\">\r\n        <div className=\"Edit-main-inputs\">\r\n          <div className=\"Edit-main-inputs-name\">\r\n            <label>Group Name</label>\r\n            <input \r\n              type=\"text\" \r\n              value={inputState.name} \r\n              onChange={(e) => handleChange(\"name\", e.target.value)} \r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"Edit-main-buttons\">\r\n          <h3\r\n            onClick={closeWindow}\r\n          >Cancel</h3>\r\n          <h3 className=\"Edit-main-buttons-delete\"\r\n            onClick={handleDelete}\r\n          >Delete</h3>\r\n          <h3\r\n            onClick={handleSave}\r\n          >Save</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { useState } from 'react';\r\nimport { UserType } from '../types/types';\r\n\r\nimport '../styles/Add&Edit.scss';\r\nimport _ from 'lodash';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  setEditList: React.Dispatch<React.SetStateAction<boolean>>;\r\n  saveMemento: () => void;\r\n  groupID: string;\r\n  listID: string;\r\n}\r\n\r\nexport default function EditList({\r\n  userState, setUserState, saveData, setEditList, listID, groupID, saveMemento\r\n}: props) {\r\n  const closeWindow = (): void => {\r\n    setEditList(false);\r\n  }\r\n\r\n  const handleChange = (property: string, value: any): void => {\r\n    setInputState({...inputState, [property]: value});\r\n  }\r\n\r\n  const handleSave = (): void => {\r\n    let oldData = userState.lists[listID];\r\n    let newData = {...oldData, ...inputState};\r\n    \r\n    if (_.isEqual(oldData, newData)) {\r\n      closeWindow();\r\n      return;  \r\n    };\r\n\r\n    saveMemento();\r\n\r\n    let newUserState = {...userState};\r\n    newUserState.lists[listID] = newData;\r\n\r\n    setUserState({...newUserState});\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const handleDelete = (): void => {\r\n    saveMemento();\r\n\r\n    let newUserState = {...userState};\r\n\r\n    const taskIDs = newUserState.lists[listID].taskIDs;\r\n\r\n    let newGroup = newUserState.groups[groupID];\r\n\r\n    newGroup.listIDs.splice(newGroup.listIDs.indexOf(listID), 1)\r\n    delete newUserState.lists[listID];\r\n    taskIDs.forEach(taskID => {\r\n      delete newUserState.tasks[taskID];\r\n    });\r\n\r\n    setUserState({...newUserState});\r\n    saveData();\r\n    closeWindow();\r\n  }\r\n\r\n  const [inputState, setInputState] = useState(userState.lists[listID]);\r\n\r\n  return (\r\n    <div className=\"Edit\">\r\n      <div className=\"Edit-bg\"\r\n        onClick={closeWindow}\r\n      ></div>\r\n      <div className=\"Edit-main\">\r\n        <div className=\"Edit-main-inputs\">\r\n          <div className=\"Edit-main-inputs-name\">\r\n            <label>List Name</label>\r\n            <input \r\n              type=\"text\" \r\n              value={inputState.name} \r\n              onChange={(e) => handleChange(\"name\", e.target.value)} \r\n            />\r\n          </div>\r\n          <div className=\"Edit-main-inputs-reset\">\r\n            <label>Resets</label>\r\n            <select \r\n              value={inputState.reset} \r\n              onChange={(e) => handleChange(\"reset\", e.target.value)} \r\n            >\r\n              <option value=\"never\">Never</option>\r\n              <option value=\"day\">Daily</option>\r\n              <option value=\"week\">Weekly</option>\r\n              <option value=\"month\">Monthly</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"Edit-main-buttons\">\r\n          <h3\r\n            onClick={closeWindow}\r\n          >Cancel</h3>\r\n          <h3 className=\"Edit-main-buttons-delete\"\r\n            onClick={handleDelete}\r\n          >Delete</h3>\r\n          <h3\r\n            onClick={handleSave}\r\n          >Save</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import '../styles/TaskField.scss';\r\n\r\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\r\nimport { UserType } from '../types/types';\r\nimport TaskGroup from './TaskGroup';\r\nimport { useState } from 'react';\r\nimport AddList from './AddList';\r\nimport AddTask from './AddTask';\r\nimport EditTask from './EditTask';\r\nimport EditGroup from './EditGroup';\r\nimport EditList from './EditList';\r\n\r\ntype props = {\r\n  userState: UserType;\r\n  setUserState: React.Dispatch<React.SetStateAction<UserType>>;\r\n  saveData: () => void;\r\n  saveMemento: () => void;\r\n}\r\n\r\nexport default function TaskField({\r\n  userState, setUserState, saveData, saveMemento\r\n}: props) {\r\n  const onDragEnd = (result: DropResult) => {\r\n    const { destination, source, draggableId, type } = result;\r\n\r\n    if (!destination) return;\r\n    \r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) return;\r\n\r\n    saveMemento();\r\n\r\n    const newUserState = {...userState};\r\n\r\n    switch (type) {\r\n      case \"task\":\r\n        const sourceList = newUserState.lists[source.droppableId];\r\n        sourceList.taskIDs.splice(source.index, 1);\r\n\r\n        const destinationList = newUserState.lists[destination.droppableId];\r\n        destinationList.taskIDs.splice(destination.index, 0, draggableId);\r\n        break;\r\n\r\n      case \"list\":\r\n        const sourceGroup = newUserState.groups[source.droppableId];\r\n        sourceGroup.listIDs.splice(source.index, 1);\r\n\r\n        const destinationGroup = newUserState.groups[destination.droppableId];\r\n        destinationGroup.listIDs.splice(destination.index, 0, draggableId);\r\n        break;\r\n\r\n      case \"group\":\r\n        newUserState.groupIDs.splice(source.index, 1);\r\n        newUserState.groupIDs.splice(destination.index, 0, draggableId);\r\n        break;\r\n    }\r\n\r\n    setUserState(newUserState);\r\n    saveData();\r\n  }\r\n\r\n  const [editGroup, setEditGroup] = useState(false);\r\n  const [addList, setAddList] = useState(false);\r\n  const [editList, setEditList] = useState(false);\r\n  const [addTask, setAddTask] = useState(false);\r\n  const [editTask, setEditTask] = useState(false);\r\n  const [selectedID, setSelectedID] = useState(\"\");\r\n  const [selectedParentID, setSelectedParentID] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable \r\n          droppableId=\"field\"\r\n          direction=\"horizontal\"\r\n          type=\"group\"\r\n        > \r\n          {(provided) =>\r\n            <div className=\"TaskField\"\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              { \r\n                userState.groupIDs.map((id, groupIndex) => \r\n                  <TaskGroup\r\n                    key={id}\r\n                    userState={userState}\r\n                    setUserState={setUserState}\r\n                    saveData = {saveData}\r\n                    saveMemento = {saveMemento}\r\n                    setSelectedID={setSelectedID}\r\n                    setEditGroup={setEditGroup}\r\n                    setAddList={setAddList}\r\n                    setEditList={setEditList}\r\n                    setAddTask={setAddTask}\r\n                    setEditTask={setEditTask}\r\n                    setSelectedParentID={setSelectedParentID}\r\n                    group={userState.groups[id]}\r\n                    groupIndex={groupIndex}\r\n                  />\r\n                )\r\n              }\r\n              {provided.placeholder}\r\n            </div>\r\n          }\r\n        </Droppable>\r\n      </DragDropContext>\r\n      {\r\n        editGroup &&\r\n        <EditGroup \r\n          userState={userState}\r\n          setUserState={setUserState}\r\n          saveData={saveData}\r\n          setEditGroup={setEditGroup}\r\n          saveMemento = {saveMemento}\r\n          groupID={selectedID}\r\n        />\r\n      }\r\n      {\r\n        addList &&\r\n        <AddList \r\n          userState={userState}\r\n          setUserState={setUserState}\r\n          saveData={saveData}\r\n          setAddList={setAddList}\r\n          saveMemento = {saveMemento}\r\n          groupID={selectedID}\r\n        />\r\n      }\r\n      {\r\n        editList &&\r\n        <EditList \r\n          userState={userState}\r\n          setUserState={setUserState}\r\n          saveData={saveData}\r\n          setEditList={setEditList}\r\n          saveMemento = {saveMemento}\r\n          groupID={selectedParentID}\r\n          listID={selectedID}\r\n        />\r\n      }\r\n      {\r\n        addTask &&\r\n        <AddTask \r\n          userState={userState}\r\n          setUserState={setUserState}\r\n          saveData={saveData}\r\n          setAddTask={setAddTask}\r\n          saveMemento = {saveMemento}\r\n          listID={selectedID}\r\n        />\r\n      }\r\n      {\r\n        editTask &&\r\n        <EditTask \r\n          userState={userState}\r\n          setUserState={setUserState}\r\n          saveData={saveData}\r\n          setEditTask={setEditTask}\r\n          saveMemento = {saveMemento}\r\n          listID={selectedParentID}\r\n          taskID={selectedID}\r\n        />\r\n      }\r\n    </>\r\n  );\r\n}","import dayjs from 'dayjs';\r\nimport { useState } from 'react';\r\nimport '../styles/App.scss';\r\nimport { Reset } from \"../types/enums\";\r\nimport { UserType } from \"../types/types\";\r\nimport Header from \"./Header\";\r\nimport TaskField from \"./TaskField\";\r\n\r\nimport updateLocale from 'dayjs/plugin/updateLocale';\r\ndayjs.extend(updateLocale);\r\n\r\ndayjs.updateLocale('en', {\r\n  weekStart: 1,\r\n});\r\n\r\nexport default function App() {\r\n  const saveData = (userData: UserType = userState): void => {\r\n    localStorage.setItem(\"user\", JSON.stringify(userData));\r\n  }\r\n\r\n  const loadData = (): UserType => {\r\n    const localUser = localStorage.getItem(\"user\");\r\n    let user: UserType = localUser ? JSON.parse(localUser) : defaultUser;\r\n\r\n    const now = Date.now();\r\n\r\n    const d1 = dayjs(user.lastLogin);\r\n    const d2 = dayjs(now);\r\n\r\n    const sameMonth = d1.isSame(d2, \"month\");\r\n    const sameWeek = d1.isSame(d2, \"week\");\r\n    const sameDay = d1.isSame(d2, \"day\");\r\n\r\n    for (const listID in user.lists) {\r\n      const list = user.lists[listID];\r\n      if (\r\n        (list.reset === \"day\" && !sameDay) ||\r\n        (list.reset === \"week\" && !sameWeek) ||\r\n        (list.reset === \"month\" && !sameMonth)\r\n      ) {\r\n        resetTasks(user, list.taskIDs);\r\n      }\r\n    }\r\n    \r\n    user.lastLogin = now;\r\n    saveData(user);\r\n\r\n    return user;\r\n  }\r\n\r\n  const resetTasks = (user: UserType, taskIDs: string[]): void  => {\r\n    for (const taskID of taskIDs) {\r\n      user.tasks[taskID].done = 0;\r\n    }\r\n  }\r\n\r\n  const saveMemento = (): void => {\r\n    const newMementos = [...mementos];\r\n    newMementos.splice(mementoIndex);\r\n    newMementos.push(JSON.stringify(userState));\r\n    const newMementoIndex = mementoIndex + 1;\r\n\r\n    setMementos([...newMementos]);\r\n    setMementoIndex(newMementoIndex);\r\n  }\r\n\r\n  const [userState, setUserState] = useState(loadData());\r\n  const [mementos, setMementos] = useState([] as string[]);\r\n  const [mementoIndex, setMementoIndex] = useState(0);\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <Header \r\n        userState = {userState}\r\n        setUserState = {setUserState}\r\n        saveData = {saveData}\r\n        mementos = {mementos}\r\n        setMementos = {setMementos}\r\n        mementoIndex = {mementoIndex}\r\n        setMementoIndex = {setMementoIndex}\r\n        saveMemento={saveMemento}\r\n      />\r\n      <TaskField \r\n        userState = {userState}\r\n        setUserState = {setUserState}\r\n        saveData = {saveData}\r\n        saveMemento = {saveMemento}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst defaultUser = {\r\n  lastLogin: Date.now(),\r\n  nextID: 31,\r\n  groupIDs: [\"1\", \"2\", \"3\"], \r\n  groups: {\r\n    \"1\": {id: \"1\", name: \"Personal\", listIDs: [\"4\", \"5\", \"6\"]},\r\n    \"2\": {id: \"2\", name: \"School\", listIDs: [\"7\", \"8\"]},\r\n    \"3\": {id: \"3\", name: \"Free Time\", listIDs: [\"9\", \"10\", \"30\"]}\r\n  },\r\n  lists: {\r\n    \"4\": {id: \"4\", name: \"Daily\", reset: Reset.DAY, taskIDs: [\"14\", \"15\", \"16\"]},\r\n    \"5\": {id: \"5\", name: \"Weekly\", reset: Reset.WEEK, taskIDs: [\"12\", \"22\", \"25\"]},\r\n    \"6\": {id: \"6\", name: \"Monthly\", reset: Reset.MONTH, taskIDs: [\"20\", \"23\"]},\r\n    \"7\": {id: \"7\", name: \"Daily\", reset: Reset.DAY, taskIDs: [\"11\", \"26\"]},\r\n    \"8\": {id: \"8\", name: \"Weekly\", reset: Reset.WEEK, taskIDs: [\"17\", \"24\"]},\r\n    \"9\": {id: \"9\", name: \"Daily\", reset: Reset.DAY, taskIDs: [\"13\", \"27\"]},\r\n    \"10\": {id: \"10\", name: \"Weekly\", reset: Reset.WEEK, taskIDs: [\"18\", \"19\", \"21\", \"29\"]},\r\n    \"30\": {id: \"30\", name: \"Long Time\", reset: Reset.NEVER, taskIDs: [\"28\"]},\r\n  },\r\n  tasks: {\r\n    \"11\": {id: \"11\", name: \"Study\", done: 0, count: 1},\r\n    \"12\": {id: \"12\", name: \"Excercise\", done: 0, count: 5},\r\n    \"13\": {id: \"13\", name: \"Have some personal time\", done: 0, count: 2},\r\n    \"14\": {id: \"14\", name: \"Tidy around\", done: 0, count: 1},\r\n    \"15\": {id: \"15\", name: \"Wake up early\", done: 0, count: 1},\r\n    \"16\": {id: \"16\", name: \"Go to bed early\", done: 0, count: 1},\r\n    \"17\": {id: \"17\", name: \"Work on projects\", done: 0, count: 4},\r\n    \"18\": {id: \"18\", name: \"Eat something delicious\", done: 0, count: 1},\r\n    \"19\": {id: \"19\", name: \"Do something exciting\", done: 0, count: 1},\r\n    \"20\": {id: \"20\", name: \"Reflect on my past month\", done: 0, count: 1},\r\n    \"21\": {id: \"21\", name: \"Try something new\", done: 0, count: 1},\r\n    \"22\": {id: \"22\", name: \"Clean thoroughly\", done: 0, count: 1},\r\n    \"23\": {id: \"23\", name: \"Develop a new habit\", done: 0, count: 2},\r\n    \"24\": {id: \"24\", name: \"Reflect on my past school week\", done: 0, count: 1},\r\n    \"25\": {id: \"25\", name: \"Plan my next week\", done: 0, count: 1},\r\n    \"26\": {id: \"26\", name: \"Do homework\", done: 0, count: 1},\r\n    \"27\": {id: \"27\", name: \"Find a new song I like\", done: 0, count: 3},\r\n    \"28\": {id: \"28\", name: \"Work on something big\", done: 0, count: 100},\r\n    \"29\": {id: \"29\", name: \"Thank Swagnemite for the website\", done: 0, count: 1},\r\n  },\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.scss';\n\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}